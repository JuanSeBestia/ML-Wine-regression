# -*- coding: utf-8 -*-
"""ML-wine-regresion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ohkOdgaJ50t-Z8MLfu_nhxFH26Ssvp2p

# ML-wine-regresion

Laboratory maked in "Curso de progrmaci√≥n para no programadores"

For this laboratory we will use the linear regression to make a model that can predict the quality of the wine according to the characteristics observed in the experiments carried out by wine tasters.

## Download database
The database is hosted on a github repo on "WineQualityRed.csv" and "WineQualityRed.csv"

This database has the samples of some experiments on the quality of the wine, contrasted with the result of some tasters
"""


"""## Import and Load Database
pip install numpy pandas matplotlib sklearn
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error



np.set_printoptions(precision=4, suppress=True)

dataWineRed = pd.read_csv("WineQualityRed.csv", sep=",").iloc[:, 1:]

for i in dataWineRed.keys():
    print("\t", "{:.4f}".format(dataWineRed[i].min()),
          "\t", "{:.4f}".format(dataWineRed[i].mean()),
          "\t", "{:.4f}".format(dataWineRed[i].max()), "\t", i)

"""## Mix the samples"""

shuffleWineRed = dataWineRed.sample(frac=1)

"""## Separate samples (training, tests)"""

numTrainRed = np.floor(0.8*len(shuffleWineRed.index)).astype(np.int)

trainWineRedX = shuffleWineRed.iloc[:numTrainRed, :-1]
trainWineRedY = shuffleWineRed.iloc[:numTrainRed, -1]
testWineRedX = shuffleWineRed.iloc[numTrainRed:, :-1]
testWineRedY = shuffleWineRed.iloc[numTrainRed:, -1]

print("Observation train set:", trainWineRedX.shape)
print("Evaluation train set:", trainWineRedY.shape)
print("Observation test set:", testWineRedX.shape)
print("Evaluation test set:", testWineRedY.shape)

"""## Found the coeficients for model"""

print("WineRed")
matXRed = np.append(np.ones((numTrainRed, 1)), trainWineRedX.values, axis=1)
XporXRed = np.matmul(np.transpose(matXRed), matXRed)
invXporXRed = np.linalg.inv(XporXRed)
XporYRed = np.matmul(np.transpose(matXRed), trainWineRedY.values)
coefBetaRed = np.matmul(invXporXRed, XporYRed)
print(coefBetaRed)
print()

"""You can use LinearRegression from the sklearn library, to do the same"""

linRegRed = LinearRegression()
linRegRed.fit(trainWineRedX, trainWineRedY)
predictWineRed = linRegRed.predict(testWineRedX)
MSERed = mean_squared_error(testWineRedY, predictWineRed)
print("Linear regression results for the RED Wine")
print("Regression intercept:\t", linRegRed.intercept_)
print("Linear regression coefficients: ", linRegRed.coef_)
print("Mean square error:\t\t", "{:.4F}".format(MSERed))
print("Root mean square error:\t", "{:.4f}".format(np.sqrt(MSERed)))
print()

"""## Predict"""

print(shuffleWineRed)

print(trainWineRedX.values[2])

print(trainWineRedY.values[2])

print(linRegRed.predict([trainWineRedX.values[2]]))